resetd(rdp)
addGraph(rdp, mobile_graph, layout.kamada.kawai(mobile_graph))
nesthc(rdp, hc, cutlevel=4, nmemb=4, labels=V(mobile_graph)$nodeAlias,
grid=c(2,2), nfontsz=25, gridScale=50)
mergeOutEdges(rdp, nlev=2)
updateContainerSize(rdp)
relax(rdp,
p1=245, ### edge target length
p2=415, ### edge stiffness
p3=123, ### node repel factor
p4=85, ### node perimeter effect
p5=30,  ### node speed limit
p6=140, ### nest-nest edge target length
p7=20,   ### nest-node repel factor
p8=9,  ### repulse radius
ps=T)   ### settings
mobile_graph <- att.setv(g=mobile_graph,
from="total_raised",
to="nodeFontSize",
xlim=c(5,25,1))
updateGraph(rdp)
?addGraph
updateContainerSize(rdp)
relax(rdp,
p1=245, ### edge target length
p2=415, ### edge stiffness
p3=123, ### node repel factor
p4=85, ### node perimeter effect
p5=30,  ### node speed limit
p6=140, ### nest-nest edge target length
p7=20,   ### nest-node repel factor
p8=9,  ### repulse radius
ps=T)   ### settings
filter(region_mobile, investor_region %in% c("SF Bay", "New York", "Boston"))
filter(region_mobile, investor_region %in% c("SF Bay", "New York", "Boston") && company_region %in% c("SF Bay", "New York", "Boston"))
filter(region_mobile, investor_region %in% c("SF Bay", "New York", "Boston") & company_region %in% c("SF Bay", "New York", "Boston"))
arrange(region_mobile, net_invested)
sample(510,1)
resetd(rdp)
addGraph(rdp, mobile_graph, layout.kamada.kawai(mobile_graph))
nesthc(rdp, hc, cutlevel=4, nmemb=4, labels=V(mobile_graph)$nodeAlias,
grid=c(2,2), nfontsz=25, gridScale=50)
mergeOutEdges(rdp, nlev=2)
updateContainerSize(rdp)
relax(rdp,
p1=245, ### edge target length
p2=415, ### edge stiffness
p3=123, ### node repel factor
p4=85, ### node perimeter effect
p5=30,  ### node speed limit
p6=140, ### nest-nest edge target length
p7=20,   ### nest-node repel factor
p8=9,  ### repulse radius
ps=T)   ### settings
update.packages()
update.packages()
setwd("~/Github/Crunchbase_Network")
options(stringsAsFactors=F)
investments <- read.csv("~/Github/Crunchbase_Network/Data/investments.csv")
library(dplyr)
colnames(investments)
filter(investments, company_name %in% c("Quid", "Palantir Technologies"))
library(plyr)
library(plyr)
library(dplyr)
num_firms <- ddply(investments,
.(company_name, funded_at, raised_amount_usd),
nrow)
colnames(num_firms)[4] <- "nfirms"
num_firms <- transform(num_firms, raised_per_firm = raised_amount_usd/nfirms)
investments <- merge(investments, num_firms)
count(investments$raised_per_firm>0)
### looks like we have quite a few cases where the amount invested is unknown
investments <- filter(investments, raised_per_firm>0)
#### let's take a look at what industries we are dealing with
count(investments$company_category_code)
### remove nonsense/useless categories
investments <- filter(investments,
!(company_category_code %in% c("", "6/28/2005", "other")))
count(investments$company_category_code)
### let's fix that typo
investments[which(investments$company_category_code=="public_relation"),
"company_category_code"] <- "public_relations"
count(investments$company_category_code)
### Now let's take a look at regions
count(investments$investor_region)
### Remove useless regions
investments <- filter(investments, !(investor_region %in% c("unknown", "TBD")))
count(investments$company_region)
investments <- filter(investments, !(company_region %in% c("unknown", "TBD")))
### There are still quite a few typos, but they shouldn't affect results too much
library(reshape2)
### Determine the aggregate amount invested from one region to another for each industry
both_invest <- recast(investments,
company_category_code + investor_region + company_region ~ variable,
sum,
measure.var="raised_per_firm",
id.var=c("company_category_code", "investor_region", "company_region"))
colnames(both_invest)[4] <- "total_invested"
### Total invested by/in each region for each category
invest_region_categ <- recast(both_invest,
investor_region + company_category_code ~ variable,
sum,
measure.var="total_invested",
id.var=c("investor_region", "company_category_code"))
company_region_categ <- recast(both_invest,
company_region + company_category_code ~ variable,
sum,
measure.var="total_invested",
id.var=c("company_region", "company_category_code"))
colnames(company_region_categ)[3] <- "total_raised"
### Unfortunately, RedeR doesn't allow for duplicate edges, so we have to change this
### dataframe to reflect aggregate in-out investment by region
region_invest <- merge(both_invest, both_invest,
by.x=c("company_category_code", "investor_region", "company_region"),
by.y=c("company_category_code", "company_region", "investor_region"),
suffixes=c(".invest", ".comp"))
head(region_invest)
region_invest <- transform(region_invest,
net_invested = total_invested.invest - total_invested.comp)
### Positive net_raised reflects more money invested than received for the investor region
### Zero net_raised should reflect investing within same region
region_invest <- filter(region_invest, net_invested>0)
arrange(count(region_invest$company_category_code), freq)
### We have 41 company categories, with Software as the most common
library(igraph)
## Let's take a look at mobile investment patterns
region_mobile <- filter(region_invest, company_category_code=="mobile")[,-1]
arrange(filter(both_invest, company_category_code=="mobile"), total_invested)
tail(arrange(filter(both_invest, company_category_code=="mobile"), total_invested))
arrange(region_mobile, net_invested)
tail(arrange(region_mobile, net_invested))
### when excluding within region investments, the largest pairing is
### sf bay investing within Seattle
mobile_graph <- graph.data.frame(region_mobile, directed=T)
E(mobile_graph)$weight <- region_mobile$net_invested
#### RedeR is a fantatstic tool for visualizing networks
#### This package allows for a framework for visualizing the hierarchical/modular
#### nature of networks. Most importantly, it comes with built-in force-directed
#### algorithms for optimizing network graph layouts
library(RedeR)
### Add some additional attributes to the graph
mobile_graph <- att.mapv(g=mobile_graph,
dat=filter(invest_region_categ,
company_category_code=="mobile"))
mobile_graph <- att.setv(g=mobile_graph,
from="name",
to="nodeAlias")
mobile_graph <- att.setv(g=mobile_graph,
from="total_invested",
to="nodeSize",
xlim=c(25,100,1))
mobile_graph <- att.mapv(g=mobile_graph,
dat=filter(company_region_categ,
company_category_code=="mobile"))
mobile_graph <- att.setv(g=mobile_graph,
from="total_raised",
to="nodeFontSize",
xlim=c(5,25,1))
mobile_graph <- att.sete(g=mobile_graph,
from="net_invested",
to="edgeWeight")
mobile_graph <- att.sete(g=mobile_graph,
from="net_invested",
to="edgeWidth",
xlim=c(5,25,1))
### create environment for visualization
rdp <- RedPort()
calld(rdp)
### make sure to maximize the new window for best viewing
resetd(rdp)
addGraph(rdp, mobile_graph, layout.kamada.kawai(mobile_graph))
resetd(rdp)
addGraph(rdp, mobile_graph, layout.kamada.kawai(mobile_graph))
relax(rdp)
mobile_graph <- att.sete(g=mobile_graph,
from="net_invested",
to="edgeWidth",
xlim=c(5,20,1))
resetd(rdp)
addGraph(rdp, mobile_graph, layout.kamada.kawai(mobile_graph))
relax(rdp)
mobile_graph <- att.sete(g=mobile_graph,
from="net_invested",
to="edgeWidth",
xlim=c(5,15,1))
resetd(rdp)
addGraph(rdp, mobile_graph, layout.kamada.kawai(mobile_graph))
relax(rdp)
mobile_graph <- att.sete(g=mobile_graph,
from="net_invested",
to="edgeWidth",
xlim=c(5,20,1))
resetd(rdp)
addGraph(rdp, mobile_graph, layout.kamada.kawai(mobile_graph))
mobile_adj <- get.adjacency(mobile_graph, attr="weight", sparse=T)
hc_mobile <- hclust(dist(mobile_adj), method="ward")
nesthc(rdp, hc_mobile, cutlevel=4, nmemb=4, labels=V(mobile_graph)$nodeAlias,
grid=c(2,2), nfontsz=25, gridScale=50)
mergeOutEdges(rdp, nlev=2)
updateContainerSize(rdp)
relax(rdp,
p1=245, ### edge target length
p2=415, ### edge stiffness
p3=123, ### node repel factor
p4=85, ### node perimeter effect
p5=30,  ### node speed limit
p6=140, ### nest-nest edge target length
p7=20,   ### nest-node repel factor
p8=9,  ### repulse radius
ps=T)   ### settings
nesthc(rdp, hc_mobile, cutlevel=4, nmemb=4, labels=V(mobile_graph)$nodeAlias,
grid=c(2,2), nfontsz=25, gridScale=50)
hc_mobile
hc_mobile$merge
hc_mobile$labels
resetd(rdp)
addGraph(rdp, mobile_graph, layout.kamada.kawai(mobile_graph))
nesthc(rdp, hc_mobile, cutlevel=4, nmemb=4, labels=V(mobile_graph)$nodeAlias,
grid=c(2,2), nfontsz=25, gridScale=50)
updateContainerSize(rdp)
relax(rdp,
p1=245, ### edge target length
p2=415, ### edge stiffness
p3=123, ### node repel factor
p4=85, ### node perimeter effect
p5=30,  ### node speed limit
p6=140, ### nest-nest edge target length
p7=20,   ### nest-node repel factor
p8=9,  ### repulse radius
ps=T)   ### settings
library(d3Network)
regions <- as.data.frame(unique(stack(region_mobile[,1:2])[,1]))
regions
colnames(regions)[1] <- "region"
regions$code <- 0
for (i in 1:nrow(regions))
regions[i,2] <- i-1
mobile_links <- merge(region_mobile[,c(1,2,5)], regions,
by.x="investor_region", by.y="region")
mobile_links <- merge(mobile_links, regions,
by.x="company_region", by.y="region",
suffixes=c(".investor", ".company"))
mobile_links
region_groups <- as.data.frame(cutree(hc_mobile, k=5))
regions <- merge(regions, region_groups)
colnames(regions)[3] <- "group"
d3ForceNetwork(Links=mobile_links,
Nodes=regions,
Source="code.investor",
Target="code.company",
NodeID="region",
Group="group",
file="crunchbase_network.html")
count(investments$company_category_code)
arrange(count(region_invest$company_category_code), freq)
head(nu_firms)
head(num_firms)
filter(num_firms, nfirms>1)
head(filter(num_firms, nfirms>1))
filter(num_firms, nfirms>1 & raised_per_firm>0)
head(filter(num_firms, nfirms>1 & raised_per_firm>0))
tail(arrange(filter(both_invest, company_category_code=="mobile"), total_invested))
?tail
tail(arrange(filter(both_invest, company_category_code=="mobile"), total_invested), 10)
tail(arrange(region_mobile, net_invested))
tail(arrange(region_mobile, net_invested), 10)
region_mobile$investor_region
region_mobile$company_region
region_mobile$investor_region
filter(region_mobile, investor_region=="Chicago")
head(investments)
count(investments$funding_round_type)
filter(investments, company_region=="Seattle" & company_category_code=="mobile")
filter(investments, company_region=="Seattle" & company_category_code=="mobile")$company_name
arrange(filter(investments, company_region=="Seattle" & company_category_code=="mobile"), raised_amount_usd)
tail(arrange(filter(investments, company_region=="Seattle" & company_category_code=="mobile"), raised_amount_usd))
count(investments$funding_round_type)
tail(arrange(filter(investments, funding_round_type=="angel"), raised_amount_usd)
)
tail(arrange(filter(investments, funding_round_type=="angel"), raised_amount_usd))
count(investments$funding_round_type)
tail(arrange(filter(investments, funding_round_type=="crowdfunding"), raised_amount_usd))
tail(arrange(filter(investments, funding_round_type=="other"), raised_amount_usd))
count(investments$funding_round_type)
tail(arrange(filter(investments, funding_round_type=="post-ipo"), raised_amount_usd))
count(investments$funding_round_type)
tail(arrange(filter(investments, funding_round_type=="private-equity"), raised_amount_usd))
count(investments$funding_round_type)
tail(arrange(filter(investments, funding_round_type=="other"), raised_amount_usd))
count(investments$funding_round_type)
tail(arrange(region_mobile, net_invested))
tail(arrange(filter(both_invest, company_category_code=="mobile"), total_invested))
tail(arrange(both_invest, total_invested))
tail(arrange(both_invest, total_invested), 10)
tail(arrange(both_invest, total_invested), 20)
filter(both_invest, investor_region=="Seattle")
filter(region_invest, investor_region=="Seattle")
arrange(filter(region_invest, investor_region=="Seattle"), net_invested)
arrange(filter(both_invest, investor_region=="Seattle"), total_invested)
arrange(filter(both_invest, investor_region=="Seattle" | company_region=="Seattle"), total_invested)
arrange(filter(region_mobile, investor_region=="Seattle" | company_region=="Seattle"), total_invested)
arrange(filter(region_mobile, investor_region=="Seattle" | company_region=="Seattle"), net_invested)
arrange(filter(region_mobile, investor_region=="Los Angeles" | company_region=="Los Angeles"), net_invested)
?d3SimpleNetwork
?d3ForceNetwork
head(mobile_links)
?scale
mobile_links$company_region
mobile_links$investor_region
head(regions)
head(mobile_links)
d3ForceNetwork(Links=mobile_links,
Nodes=regions,
Value="net_invested"
file="crunchbase_network.html")
NodeID="region",
Target="code.company",
Group="group",
Source="code.investor",
d3ForceNetwork(Links=mobile_links,
Nodes=regions,
Source="code.investor",
Target="code.company",
Value="net_invested"
NodeID="region",
Group="group",
file="crunchbase_network.html")
d3ForceNetwork(Links=mobile_links,
Nodes=regions,
Source="code.investor",
Target="code.company",
Value="net_invested",
NodeID="region",
Group="group",
file="crunchbase_network.html")
scale(mobile_links$net_invested)
scale(mobile_links$net_invested, center=1)
mobile_links <- transform(mobile_links, scale_invest=scale(net_invested, center=1))
d3ForceNetwork(Links=mobile_links,
Nodes=regions,
Source="code.investor",
Target="code.company",
Value="scale_invest",
NodeID="region",
Group="group",
file="crunchbase_network.html")
resetd(rdp)
addGraph(rdp, mobile_graph, layout.kamada.kawai(mobile_graph))
nesthc(rdp, hc_mobile, cutlevel=4, nmemb=4, labels=V(mobile_graph)$nodeAlias,
grid=c(1,3), nfontsz=25, gridScale=50)
updateContainerSize(rdp)
relax(rdp,
p1=245, ### edge target length
p2=415, ### edge stiffness
p4=85, ### node perimeter effect
p6=140, ### nest-nest edge target length
p7=20,   ### nest-node repel factor
p8=9,  ### repulse radius
ps=T)   ### settings
p5=30,  ### node speed limit
p3=123, ### node repel factor
relax(rdp,
p1=245, ### edge target length
p2=415, ### edge stiffness
p3=123, ### node repel factor
p4=85, ### node perimeter effect
p5=30,  ### node speed limit
p6=140, ### nest-nest edge target length
p7=20,   ### nest-node repel factor
p8=9,  ### repulse radius
ps=T)   ### settings
degree(mobile_graph)
?degree
graph.edgelist(mobile_graph)
head(region_mobile)
graph.edgelist(region_mobile[,1:2])
graph.edgelist(as.matrix(region_mobile[,1:2]))
graph.edgelist(as.matrix(region_mobile[,1:2])-1)
graph.edgelist(region_mobile[,1:2]-1)
graph.edgelist(as.matrix(region_mobile[,1:2]))
graph.edgelist(as.matrix(region_mobile[,1:2]))$name
V(graph.edgelist(as.matrix(region_mobile[,1:2]))_$name
V(graph.edgelist(as.matrix(region_mobile[,1:2])))$name
resetd(rdp)
addGraph(rdp, mobile_graph, layout.kamada.kawai(mobile_graph))
mobile_graph <- att.setv(g=mobile_graph,
from="total_invested",
to="nodeSize",
xlim=c(25,50,1))
resetd(rdp)
addGraph(rdp, mobile_graph, layout.kamada.kawai(mobile_graph))
relax(rdp)
mobile_adj <- get.adjacency(mobile_graph, attr="weight", sparse=T)
hc_mobile <- hclust(dist(mobile_adj), method="ward")
nesthc(rdp, hc_mobile, cutlevel=4, nmemb=4, labels=V(mobile_graph)$nodeAlias,
grid=c(2,2), nfontsz=25, gridScale=50)
updateContainerSize(rdp)
resetd(rdp)
addGraph(rdp, mobile_graph, layout.kamada.kawai(mobile_graph))
relax(rdp)
nesthc(rdp, hc_mobile, cutlevel=4, nmemb=5, labels=V(mobile_graph)$nodeAlias,
grid=c(2,2), nfontsz=25, gridScale=50)
updateContainerSize(rdp)
relax(rdp,
p1=245, ### edge target length
p2=415, ### edge stiffness
p3=123, ### node repel factor
p4=85, ### node perimeter effect
p5=30,  ### node speed limit
p6=140, ### nest-nest edge target length
p7=20,   ### nest-node repel factor
p8=9,  ### repulse radius
ps=T)   ### settings
nesthc(rdp, hc_mobile, cutlevel=5, nmemb=4, labels=V(mobile_graph)$nodeAlias,
grid=c(2,2), nfontsz=25, gridScale=50)
updateContainerSize(rdp)
resetd(rdp)
?addGraph
addGraph(rdp, mobile_graph, layout.kamada.kawai(mobile_graph))
?layout.fruchterman.reingold
calld(rdp)
addGraph(rdp, mobile_graph, layout.auto(mobile_graph))
resetd(rdp)
addGraph(rdp, mobile_graph, layout.auto(mobile_graph, d=3))
addGraph(rdp, mobile_graph, layout.auto(mobile_graph, dim=3))
addGraph(rdp, mobile_graph, layout.auto(mobile_graph))
relax(rdp)
resetd(rdp)
addGraph(rdp, mobile_graph, layout.random(mobile_graph))
?d3SimpleNetwork
d3SimpleNetwork(Links=mobile_links,
Nodes=regions,
Source="code.investor",
Target="code.company",
Value="scale_invest",
NodeID="region",
Group="group",
file="crunchbase_network.html")
head(mobile_links)
d3SimpleNetwork(Data=mobile_links[,1:3],
file="crunchbase_network.html")
head(region_mobile)
d3SimpleNetwork(Data=region_mobile[,c(1,2,5)],
file="mobile_region_graph.html")
d3SimpleNetwork(Data=region_mobile[,c(1,2,5)],
file="mobile_region_graph.html")
?d3ForceNetwork
d3ForceNetwork(Links=mobile_links,
Nodes=regions,
Source="code.investor",
Target="code.company",
Value="scale_invest",
NodeID="region",
file="crunchbase_network.html")
head(mobile_links)
d3ForceNetwork(Links=mobile_links,
Nodes=regions,
Source="code.investor",
Target="code.company",
Value="scale_invest",
NodeID="region",
file="crunchbase_network.html")
d3SimpleNetwork(Data=region_mobile[,c(1,2,5)],
fontsize=15,
file="mobie_region_graph_test.html")
d3ForceNetwork(Links=mobile_links,
Nodes=regions,
Source="code.investor",
Target="code.company",
Value="scale_invest",
NodeID="region",
Group="group",
file="crunchbase_network.html")
d3SimpleNetwork(Data=region_mobile[,c(1,2,5)],
fontsize=15,
Value="net_invested"
file="mobie_region_graph_test.html")
d3SimpleNetwork(Data=region_mobile[,c(1,2,5)],
fontsize=15,
Value="net_invested",
file="mobie_region_graph_test.html")
head(mobile_links)
head(regions)
head(region_mobile)
V(mobile_graph)$nodeSize
cbind(V(mobile_graph)$name,V(mobile_graph)$nodeSize)
calld(rdp)
addGraph(rdp, mobile_graph, layout.kamada.kawai(mobile_graph))
E(mobile_graph)$edgeSize
E(mobile_graph)$edgeWidth
cbind(V(mobile_graph)$name,V(mobile_graph)$nodeSize)
cbind(V(mobile_graph)$name,V(mobile_graph)$nodeSize,V(mobile_graph)$nodeFontSize)
mobile_grap
mobile_graph
cbind(E(mobile_graph)$weight)
get.data.frame(mobile_graph)
View(get.data.frame(mobile_graph))
head(region_mobile)
mobile_links <- region_mobile[,c(1,2,5)]
colnames(mobile_links) <- c("source", "target", "value")
write.csv(mobile_links, "mobile_region_links.csv")
?write.csv
write.csv(mobile_links, "mobile_region_links.csv", row.names=F)
?centrality
?centralization
?alpha.centrality
alpha.centrality(mobile_graph)
as.data.frame(alpha.centrality(mobile_graph))
which.max(as.data.frame(alpha.centrality(mobile_graph)))
as.data.frame(alpha.centrality(mobile_graph))
arrange(as.data.frame(alpha.centrality(mobile_graph)), alpha.centrality(mobile_graph))
